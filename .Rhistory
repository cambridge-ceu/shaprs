inputData_blendFactors$P=inputData_blendFactors$Qval # add the adjusted Q vals as 'P', as that is col I would be plotting next
lfdr_2_blending = 1-inputData_blendFactors$lFDR
base_colour1 = 0.20
base_colour2 = 0.20
manhattanBaseColours = c(rgb(0,base_colour2,0,1),rgb(0,0,base_colour1,1) )
allIndices = inputData_blendFactors$BP
# need to offset the SNP BP indices, by the previous number of indices in all previous chromosomes
inputData_blendFactors$Offsets = 0
for (i in 1:21) { # we always set the next offset, so we dont loop til last Chrom
message(i)
CHR_SNPs = inputData_blendFactors[inputData_blendFactors$CHR == i,]
maxBPCurrentChrom = max(CHR_SNPs$BP)
currentOffset = CHR_SNPs$Offsets[1]
nextOffset = currentOffset + maxBPCurrentChrom
inputData_blendFactors[inputData_blendFactors$CHR == (i+1),9] = nextOffset
}
hist(B12_blendFactors$lFDR, probability = T, col ="red", xlab = "lFDR", main ="")
plot(B12_blendFactors$lFDR, B12_blendFactors$b, col ="red", xlab = "lFDR", ylab = "SNP coef", main ="")
# get distribution
library(scales)
plot(B12_blendFactors$lFDR[1:5000], B12_blendFactors$b[1:5000], col =alpha("red", 0.4), xlab = "lFDR", ylab = "SNP coef", main ="")
plot(B12_blendFactors$lFDR[1:5000], B12_blendFactors$b[1:5000], col =alpha("red", 0.3), xlab = "lFDR", ylab = "SNP coef", main ="")
baseLoc="C:/0Datasets/ukbb/fis/"
phenoLoc=paste0(baseLoc, "pheno")
covarsLoc=paste0(baseLoc, "covariates")
pheno=read.table(phenoLoc  ,header=F)
View(pheno)
covars=read.table(covarsLoc  ,header=T)
View(covars)
men_index = which(covars$SEX =="M")
female_pheno = pheno[female_index]
female_index = which(covars$SEX =="F")
male_pheno = pheno[men_index]
men_index = which(covars$SEX =="M")
female_index = which(covars$SEX =="F")
female_pheno = pheno[female_index]
male_pheno = pheno[men_index]
men_index
female_pheno = pheno$V1[female_index]
male_pheno = pheno$V1[men_index]
mean(female_pheno)
mean(male_pheno) # 5.788613
t.test(male_pheno,female_pheno)
var(female_pheno)
var(male_pheno) #
percDifference = function (data1, data2) {
mean1 = mean(data1)
mean2 = mean(data2)
percDiff = round( (mean1 - mean2) / ( (mean1 + mean2)/2 ) * 100)
return(percDiff)
}
percDifference = function (data1, data2) {
percDiff = round( (data1 - data2) / ( (data1 + data2)/2 ) * 100)
return(percDiff)
}
percDifference( mean(male_pheno), mean(male_pheno) )
percDifference( mean(male_pheno), mean(female_pheno) )
female_townsend = covars$TOWNSEND[female_index]
male_townsend = covars$TOWNSEND[men_index]
mean(female_townsend)
mean(male_townsend) # -1.655731
var(female_townsend)
var(male_townsend)
t.test(male_townsend, female_townsend)
percDifference( var(male_pheno), var(female_pheno) ) # FIS: 4
baseLoc="C:/0Datasets/ukbb/height/"
phenoLoc=paste0(baseLoc, "pheno")
covarsLoc=paste0(baseLoc, "covariates")
pheno=read.table(phenoLoc  ,header=F)
covars=read.table(covarsLoc  ,header=T)
men_index = which(covars$SEX =="M")
female_index = which(covars$SEX =="F")
female_pheno = pheno$V1[female_index]
male_pheno = pheno$V1[men_index]
mean(female_pheno) # FIS: 5.788613
mean(male_pheno) # FIS: 5.995717
percDifference( mean(male_pheno), mean(female_pheno) ) # FIS: 4
t.test(male_pheno,female_pheno) # t = 22.523, df = 184654, p-value < 2.2e-16
var(female_pheno) # FIS: 3.778955
var(male_pheno) # FIS: 4.301227
percDifference( var(male_pheno), var(female_pheno) ) # FIS: 13
baseLoc="C:/0Datasets/ukbb/bmi/"
phenoLoc=paste0(baseLoc, "pheno")
covarsLoc=paste0(baseLoc, "covariates")
pheno=read.table(phenoLoc  ,header=F)
covars=read.table(covarsLoc  ,header=T)
men_index = which(covars$SEX =="M")
female_index = which(covars$SEX =="F")
female_pheno = pheno$V1[female_index]
male_pheno = pheno$V1[men_index]
mean(female_pheno) # FIS: 5.788613 # 162.6658
mean(male_pheno) # FIS: 5.995717 # 175.9021
percDifference( mean(male_pheno), mean(female_pheno) ) # FIS: 4, Height: 8
t.test(male_pheno,female_pheno) # FIS/Height: p-value < 2.2e-16
var(female_pheno) # FIS: 3.778955, Height: 38.63668
var(male_pheno) # FIS: 4.301227, 45.66119
percDifference( var(male_pheno), var(female_pheno) ) # FIS: 13, Height: 17
var(female_townsend) # 7.647166
var(male_townsend) # 7.98267 # variance is greater for men
mean(female_townsend) # -1.655731
# Compare male female townsends
female_townsend = covars$TOWNSEND[female_index]
male_townsend = covars$TOWNSEND[men_index]
mean(female_townsend) # -1.655731
mean(male_townsend) # -1.658059
t.test(male_townsend, female_townsend) #  p-value = 0.8553
var(female_townsend) # 7.647166
var(male_townsend) # 7.98267 # variance is greater for men
hist(male_pheno)
hist(female_pheno)
hist(male_pheno)
hist(female_pheno)
library("bigsnpr")
library("pryr")
Pop1LDRefLoc= "C:/0Datasets/LdPred2/"
Pop2LDRefLoc="C:/0Datasets/LdPred2/"
chromNum=21
blendFactorLoc ="C:/0Datasets/shaPRS/GWAS_f1_lFDR_meta_SNP_lFDR"
sumstatsLoc="C:/0Datasets/shaPRS/crossAncestry/EUR_JAP_asthma_SE_meta"
outputLoc ="C:/0Datasets/shaPRS/0shaPRS/0ukbb/debug/1_pheBlend_sumstats_meta"
produceBasicLDreftoo=T
# 1. load Map data
pop1_map_rds = readRDS(file = paste0(Pop1LDRefLoc,"map.rds") )
pop2_map_rds = readRDS(file = paste0(Pop2LDRefLoc,"map.rds") )
# load raw blending factors and summary stats for the entire genome
blendingFactors= read.table(blendFactorLoc, header = T)
sumsData= read.table(sumstatsLoc, header = T)
dir.create(file.path(paste0(outputLoc,"/") ), showWarnings = FALSE)
if(produceBasicLDreftoo) {
dir.create(file.path(paste0(outputLoc,"_basic/") ), showWarnings = FALSE)
}
# merge them
sumstatsDataAll =  merge(blendingFactors,sumsData,by.x = "SNP",by.y = "SNP")
# remove non numeric data
sumstatsDataAll <- sumstatsDataAll[!is.na(as.numeric(as.character(sumstatsDataAll$lFDR))),]
sumstatsDataAll <- sumstatsDataAll[!is.na(as.numeric(as.character(sumstatsDataAll$SE_A))),]
sumstatsDataAll <- sumstatsDataAll[!is.na(as.numeric(as.character(sumstatsDataAll$SE_B))),]
# now actually cast them to numeric
sumstatsDataAll$lFDR = as.numeric(as.character(sumstatsDataAll$lFDR ))
sumstatsDataAll$SE_A = as.numeric(as.character(sumstatsDataAll$SE_A ))
sumstatsDataAll$SE_B = as.numeric(as.character(sumstatsDataAll$SE_B ))
#alleles = c("G", "G","C","G")
flipStrand = function(alleles) {
allelesFlipped = alleles
whereAsare = which(alleles == "A")
whereGsare = which(alleles == "G")
allelesFlipped[which(allelesFlipped == "T")] = "A" # flip Ts to As
allelesFlipped[which(allelesFlipped == "C")] = "G" # flip Cs to Gs
allelesFlipped[whereAsare] = "T" # flip As to Ts
allelesFlipped[whereGsare] = "C" # flip Gs to Cs
return(allelesFlipped)
}
alignStrands = function(inputData, A1.x ="A1.x", A2.x ="A2.x", A1.y ="A1.y", A2.y ="A2.y") {
# exclude ambiguous SNPs
ambiguousSNPIndices = which(inputData[,A1.x] == "G" & inputData[,A2.x] == "C" |  inputData[,A1.x] == "C" & inputData[,A2.x] == "G" | inputData[,A1.x] == "A" & inputData[,A2.x] == "T"  | inputData[,A1.x == "T"] &  inputData[,A2.x] ==  "A" |
inputData[,A1.y] == "G" & inputData[,A2.y ]== "C" |  inputData[,A1.y] == "C" & inputData[,A2.y] == "G" | inputData[,A1.y] == "A" & inputData[,A2.y] == "T"  | inputData[,A1.y == "T"] &  inputData[,A2.y] ==  "A")
print(paste0("removed ", length(ambiguousSNPIndices), " ambiguous SNPs out of ", nrow(inputData), " variants"))
if(length(ambiguousSNPIndices) > 0) inputData = inputData[-ambiguousSNPIndices,] # otherwise R would remove all as R is shit
# 0. Reverse strands: (this assumes that ambigous SNPs have been excluded prior to this)
# cache flipped strands for phenoB
inputData$A1.y_flipped =  flipStrand(inputData[,A1.y])
inputData$A2.y_flipped =  flipStrand(inputData[,A2.y])
# if 2nd sumstats CAN be matched to 1st, IE
#                                                                                 regular match                                                                                                                         reverse match                                                                                                    flipped match                                                                                                    reverse flipped match
matchedIndices = which(as.character(inputData[,A1.x]) == as.character(inputData[,A1.y]) & as.character(inputData[,A2.x]) == as.character(inputData[,A2.y]) |  as.character(inputData[,A1.x]) == as.character(inputData[,A2.y]) & as.character(inputData[,A2.x]) == as.character(inputData[,A1.y]) | as.character(inputData[,A1.x]) == as.character(inputData$A1.y_flipped) & as.character(inputData[,A2.x]) == as.character(inputData$A2.y_flipped)  | as.character( inputData[,A1.x]) == as.character(inputData$A2.y_flipped) &  as.character(inputData[,A2.x]) == as.character(inputData$A1.y_flipped) )
print(paste0("matched ", length(matchedIndices), " out of ", nrow(inputData), " variants"))
# as there may be non-SNPs, we need to cast them as character
# exclude unmatchables
inputData = inputData[matchedIndices,]
#inputData = inputData_orig
# flip those A1/A2s which were flipped matches
#                                                                                       flipped match                                                                                                                                reverse flipped match
flippedIndices = which(as.character(inputData[,A1.x]) == as.character(inputData$A1.y_flipped) & as.character(inputData[,A2.x]) == as.character(inputData$A2.y_flipped) | as.character(inputData[,A1.x]) == as.character(inputData$A2.y_flipped) & as.character(inputData[,A2.x]) ==  as.character(inputData$A1.y_flipped) )
# print( head(inputData[flippedIndices,]) )
print(paste0("flipped strand for ", length(flippedIndices), " variants"))
inputData[flippedIndices,A1.y] = as.character(inputData$A1.y_flipped[flippedIndices])
inputData[flippedIndices,A2.y] = as.character(inputData$A2.y_flipped[flippedIndices])
return(inputData)
}
# align the summary for phe A and B
sumstatsDataAll = alignStrands(sumstatsDataAll)
hromNum=21
# load the two chromosomes from each population
pop1LDmatrix = readRDS(file = paste0(Pop1LDRefLoc,"LD_chr",chromNum,".rds") )
pop2LDmatrix = readRDS(file = paste0(Pop2LDRefLoc,"LD_chr",chromNum,".rds") )
# 2. grab the RSids from the map for the SNPS on this chrom, each LD mat has a potentiall different subset of SNPs
pop1_chrom_SNPs = pop1_map_rds[ which(pop1_map_rds$chr == chromNum),] # this is guaranteed to be the same order as the pop1LDmatrix
pop2_chrom_SNPs = pop2_map_rds[ which(pop2_map_rds$chr == chromNum),] # this is guaranteed to be the same order as the pop2LDmatrix
pop1_chrom_SNPs$pop1_id = 1:nrow(pop1_chrom_SNPs)
pop2_chrom_SNPs$pop2_id = 1:nrow(pop2_chrom_SNPs)
# intersect the 2 SNP lists so that we only use the ones common to both LD matrices by merging them
chrom_SNPs_df  <- merge(pop1_chrom_SNPs,pop2_chrom_SNPs, by = "rsid")
View(chrom_SNPs_df)
chrom_SNPs_df_good = chrom_SNPs_df
# save LD ref examples
fileName= "C:/Users/mk23/GoogleDrive_Cam/0Publications/shaPRS/R_package/shaPRS/inst/extdata/my_data.rds"
pop1_map_rds = readRDS(file = fileName )
fileName= "C:/Users/mk23/GoogleDrive_Cam/0Publications/shaPRS/R_package/shaPRS/inst/extdata/my_data2.rds"
pop2_map_rds = readRDS(file = fileName )
#sumstatsData_toy = sumstatsDataAll[which(sumstatsDataAll$CHR == chromNum ),]
fileName= "C:/Users/mk23/GoogleDrive_Cam/0Publications/shaPRS/R_package/shaPRS/inst/extdata/sumstatsData_toy.rds"
#saveRDS(sumstatsData_toy, file =fileName)
sumstatsData = readRDS(file = fileName )
fileName= "C:/Users/mk23/GoogleDrive_Cam/0Publications/shaPRS/R_package/shaPRS/inst/extdata/LDref.rds"
pop1LDmatrix  = readRDS(file = fileName )
fileName= "C:/Users/mk23/GoogleDrive_Cam/0Publications/shaPRS/R_package/shaPRS/inst/extdata/LDref2.rds"
pop2LDmatrix = readRDS(file = fileName )
dim(pop1_map_rds)
dim(pop2LDmatrix)
# use chrom 21 as an example
chromNum=21
# 2. grab the RSids from the map for the SNPS on this chrom, each LD mat has a potentiall different subset of SNPs
pop1_chrom_SNPs = pop1_map_rds[ which(pop1_map_rds$chr == chromNum),] # this is guaranteed to be the same order as the pop1LDmatrix
pop2_chrom_SNPs = pop2_map_rds[ which(pop2_map_rds$chr == chromNum),] # this is guaranteed to be the same order as the pop2LDmatrix
pop1_chrom_SNPs$pop1_id = 1:nrow(pop1_chrom_SNPs)
pop2_chrom_SNPs$pop2_id = 1:nrow(pop2_chrom_SNPs)
# intersect the 2 SNP lists so that we only use the ones common to both LD matrices by merging them
chrom_SNPs_df  <- merge(pop1_chrom_SNPs,pop2_chrom_SNPs, by = "rsid")
View(chrom_SNPs_df)
View(pop1_chrom_SNPs)
View(pop1_map_rds)
View(pop2_chrom_SNPs)
# 2. grab the RSids from the map for the SNPS on this chrom, each LD mat has a potentiall different subset of SNPs
pop1_chrom_SNPs = pop1_map_rds[ which(pop1_map_rds$chr == chromNum),] # this is guaranteed to be the same order as the pop1LDmatrix
pop2_chrom_SNPs = pop2_map_rds[ which(pop2_map_rds$chr == chromNum),] # this is guaranteed to be the same order as the pop2LDmatrix
View(pop1_chrom_SNPs)
fileName= "C:/Users/mk23/GoogleDrive_Cam/0Publications/shaPRS/R_package/shaPRS/inst/extdata/my_data2.rds"
pop2_map_rds = readRDS(file = fileName )
# 2. grab the RSids from the map for the SNPS on this chrom, each LD mat has a potentiall different subset of SNPs
pop1_chrom_SNPs = pop1_map_rds[ which(pop1_map_rds$chr == chromNum),] # this is guaranteed to be the same order as the pop1LDmatrix
pop2_chrom_SNPs = pop2_map_rds[ which(pop2_map_rds$chr == chromNum),] # this is guaranteed to be the same order as the pop2LDmatrix
View(pop1_map_rds)
# 1. load Map data
pop1_map_rds = readRDS(file = paste0(Pop1LDRefLoc,"map.rds") )
pop2_map_rds = readRDS(file = paste0(Pop2LDRefLoc,"map.rds") )
# 2. grab the RSids from the map for the SNPS on this chrom, each LD mat has a potentiall different subset of SNPs
pop1_chrom_SNPs = pop1_map_rds[ which(pop1_map_rds$chr == chromNum),] # this is guaranteed to be the same order as the pop1LDmatrix
# save LD ref examples
fileName= "C:/Users/mk23/GoogleDrive_Cam/0Publications/shaPRS/R_package/shaPRS/inst/extdata/my_data.rds"
saveRDS(pop1_chrom_SNPs[1:100,], file =fileName)
# save LD ref examples
fileName= "C:/Users/mk23/GoogleDrive_Cam/0Publications/shaPRS/R_package/shaPRS/inst/extdata/my_data.rds"
pop1_map_rds = readRDS(file = fileName )
fileName= "C:/Users/mk23/GoogleDrive_Cam/0Publications/shaPRS/R_package/shaPRS/inst/extdata/my_data2.rds"
pop2_map_rds = readRDS(file = fileName )
View(pop1_map_rds)
# 2. grab the RSids from the map for the SNPS on this chrom, each LD mat has a potentiall different subset of SNPs
pop1_chrom_SNPs = pop1_map_rds[ which(pop1_map_rds$chr == chromNum),] # this is guaranteed to be the same order as the pop1LDmatrix
pop2_chrom_SNPs = pop2_map_rds[ which(pop2_map_rds$chr == chromNum),] # this is guaranteed to be the same order as the pop2LDmatrix
pop1_chrom_SNPs$pop1_id = 1:nrow(pop1_chrom_SNPs)
pop2_chrom_SNPs$pop2_id = 1:nrow(pop2_chrom_SNPs)
# intersect the 2 SNP lists so that we only use the ones common to both LD matrices by merging them
chrom_SNPs_df  <- merge(pop1_chrom_SNPs,pop2_chrom_SNPs, by = "rsid")
View(chrom_SNPs_df)
# align the two LD matrices
chrom_SNPs_df = alignStrands(chrom_SNPs_df, A1.x ="a1.x", A2.x ="a0.x", A1.y ="a1.y", A2.y ="a0.y")
# align the summary for phe A and B
sumstatsData = alignStrands(sumstatsData)
# subset sumstats data to the same chrom
sumstatsData = sumstatsData[which(sumstatsData$CHR == chromNum ),]
# merge sumstats with common LD map data
sumstatsData  <- merge(chrom_SNPs_df,sumstatsData, by.x="rsid", by.y = "SNP")
# remove duplicates
sumstatsData = sumstatsData[ !duplicated(sumstatsData$rsid) ,]
# use the effect alleles for the sumstats data with the effect allele of the LD mat
# as we are aligning the LD mats against each other, not against the summary stats
# we only use the lFDR /SE from the sumstats, which are directionless, so those dont need to be aligned
sumstatsData$A1.x =sumstatsData$a1.x
sumstatsData$A1.y =sumstatsData$a1.y
# make sure the sumstats is ordered the same way as the LD matrix:
sumstatsData = sumstatsData[order(sumstatsData$pop1_id), ] # it doesn't matter which matrix to use to order the sumstats as they are the same
# subset the LD matrices to the SNPs we actualy have
pop1LDmatrix = pop1LDmatrix[sumstatsData$pop1_id,sumstatsData$pop1_id]
pop2LDmatrix = pop2LDmatrix[sumstatsData$pop2_id,sumstatsData$pop2_id]
LDRefBlend = function(pop1LDmatrix,pop2LDmatrix, sumstatsData) {
require(compiler)
enableJIT(3)
library(Matrix)
## use symbols from the tex
wA = 1 - sumstatsData$lFDR    # wA is SNP_A's lFDR , between study 1 and study 2
tauA1 = 1/sumstatsData$SE_A^2 # tauA1 is SNP_A's study 1 precision
tauA2 = 1/sumstatsData$SE_B^2 # tauA2 is SNP_A's study 2 precision
wB = 1 - sumstatsData$lFDR    # wB is SNP_B's lFDR, between study 1 and study 2
tauB1 = 1/sumstatsData$SE_A^2 # tauB1 is SNP_B's study 1 precision
tauB2 = 1/sumstatsData$SE_B^2 # tauB2 is SNP_B's study 2 precision
## build covariance matrix
r1 = convertDSCToDense(pop1LDmatrix) # LD between SNPA and SNPB in study (population) 1 # must convert to dense otherwise will get memory error later
prodA=(tauA1 + wA*tauA2)/(tauA1 + tauA2)/sqrt(tauA1) # vector of 5, IE pre-calculating all for all 'A' and all 'B; SNPs, all terms
prodB=(tauB1 + wB*tauB2)/(tauB1 + tauB2)/sqrt(tauB1) # vector of 5
# mat of 5x5, an outer product of A and B, IE make it the same dim as the LD matrix, IE the outer product expands out and performs all calculations in the loop in one go
# IE outer product =~ loop
term1=outer(prodA,prodB,"*") * r1   # multiplying elementwise by the LD
remove(r1) # free up RAM
# align the two LD matrices: invert correlations where one of the studies' effect allele is flipped wrt other studies' effect allele
misalignedAlleleIndices = which( as.character(sumstatsData$A1.x) != as.character(sumstatsData$A1.y) ) # compare as character, as if we have non-SNPs with different alleles factors will break
if(length(misalignedAlleleIndices) > 0) message(paste0(length(misalignedAlleleIndices)), " misaligned variants correlation were reversed" )
# create a vector of the flipped alleles, 1 for aloigned, and -1 for misaligned
flipped_mask =  rep(1, nrow(sumstatsData) )
flipped_mask[misalignedAlleleIndices] = -1 # set
# create a mask of the flipped alleles: this is just the outer product of the above vector
flippedMat=outer(flipped_mask,flipped_mask,"*")  # create a matrix that can be used to flip correlations via elementwise multiplications
r2 = convertDSCToDense(pop2LDmatrix) # LD between SNPA and SNPB in study (population) 2
r2 = r2 * flippedMat # apply the flipping to the second LD mat
remove(flippedMat) # free up RAM
prodA=((1-wA) * tauA2)/(tauA1 + tauA2)/sqrt(tauA2)
prodB=((1-wB) * tauB2)/(tauB1 + tauB2)/sqrt(tauB2)
term2=outer(prodA,prodB,"*") * r2
remove(r2) # free up RAM
covmat=term1 + term2 # reconstruct full eq from 3.1
# free up ram
remove(term1)
remove(term2)
## need variance to get cor
# this replaces my
# SEbar_A = sqrt( VarAbar )
# VarAbar = wA^2 /taoA1 + (1-wA^2) / (taoA1 + taoA2)
VbarA=wA^2/tauA1 + (1-wA^2)/(tauA1+tauA2) # vector of 5, of the variances
VbarB=wB^2/tauB1 + (1-wB^2)/(tauB1+tauB2)
outerProd = outer(sqrt(VbarA),sqrt(VbarB),"*") # this multiplies all combination of SEs together to create a 5x5 dim matrix
# and thus replacing the loop that generates
cormat=covmat / outerProd
# free up ram
remove(covmat)
remove(outerProd)
return(cormat)
}
# helper function that converts an LD from sparse DSC to Dense format, in a given number of parts (to overcome RAM limitations)
convertDSCToDense = function(pop1LDmatrix, numparts = 3) {
# convert dsc to dense matrix in a non-crashing way
firstHalf = floor(ncol(pop1LDmatrix)/numparts)
start = 0;
end = 0
r1 = NULL
for (i in 1:numparts) {
start = end
if (i == numparts) { # last one has to go to the end
end = ncol(pop1LDmatrix)
} else {
end = end + firstHalf
}
r1_p1 = as.matrix(pop1LDmatrix[,(start+1):end])
r1 = cbind(r1,r1_p1)
remove(r1_p1)
}
return(r1)
}
# generate the blended LD matrix
cormat = LDRefBlend(pop1LDmatrix,pop2LDmatrix, sumstatsData)
View(cormat)
library("devtools")
library(roxygen2)
#setwd("C:/Users/mk23/GoogleDrive_phd/PHD/!Publications/shaPRS/R_package_303021/shaPRS")
setwd("C:/Users/mk23/GoogleDrive_Cam/0Publications/shaPRS/R_package/shaPRS")
#install_github("jdstorey/qvalue")
#install_github("mkelcb/shaprs")
usethis::use_package("qvalue")
document()
library("devtools")
library(roxygen2)
#setwd("C:/Users/mk23/GoogleDrive_phd/PHD/!Publications/shaPRS/R_package_303021/shaPRS")
setwd("C:/Users/mk23/GoogleDrive_Cam/0Publications/shaPRS/R_package/shaPRS")
#install_github("jdstorey/qvalue")
#install_github("mkelcb/shaprs")
usethis::use_package("qvalue")
document()
build()
build()
install()
document()
build()
install()
uninstall()
library("devtools")
library(roxygen2)
# Build package
build()
install.packages("Rtools")
install.packages("rtools4")
# Build package
build()
# Build package
build()
# Test install
install()
check(cran=TRUE)
check(cran=TRUE)
usethis::use_package("Matrix")
document()
check(cran=TRUE)
usethis::use_package("Matrix")
document()
check(cran=TRUE)
usethis::use_package("Matrix")
document()
document()
# 1) set working Dir
#setwd("C:/Users/mk23/GoogleDrive_phd/PHD/!Publications/shaPRS/R_package_303021/shaPRS")
setwd("C:/Users/mk23/GoogleDrive_Cam/0Publications/shaPRS/R_package/shaPRS")
#install_github("jdstorey/qvalue")
#install_github("mkelcb/shaprs")
usethis::use_package("qvalue")
usethis::use_package("Matrix")
document()
#install_github("jdstorey/qvalue")
#install_github("mkelcb/shaprs")
usethis::use_package("qvalue")
usethis::use_package("Matrix")
usethis::use_package("compiler")
document()
check(cran=TRUE)
requireNamespace
check(cran=TRUE)
check(cran=TRUE)
check(cran=TRUE)
check(cran=TRUE)
check(cran=TRUE)
check(cran=TRUE)
check(cran=TRUE)
document()
check(cran=TRUE)
library("qqman")
library(scales)
inputDataLoc="C:/0Datasets/shaPRS/DEL/EUR_JAP_T2D_SE_meta"
blendFactorsLoc="C:/0Datasets/shaPRS/DEL/EUR_JAP_T2D_lFDR_meta_SNP_lFDR"
outputLoc="C:/0Datasets/shaPRS/DEL/QvalManhattan"
B12Loc = "C:/0Datasets/shaPRS/DEL/EUR_JAP_T2D_sumstats_meta"
plotTitle="Uga"
# 1. load data
inputData= read.table(inputDataLoc, header = T)
blendFactors= read.table(blendFactorsLoc, header = T)
B12= read.table(B12Loc, header = T)
inputData_blendFactors = merge(inputData,blendFactors, by ="SNP") # merge to make sure they are aligned
B12_blendFactors = merge(B12,blendFactors, by ="SNP") # merge to make sure they are aligned
# MANHATTAN PLOT
inputData_blendFactors$P=inputData_blendFactors$Qval # add the adjusted Q vals as 'P', as that is col I would be plotting next
lfdr_2_blending = 1-inputData_blendFactors$lFDR
base_colour1 = 0.20
base_colour2 = 0.20
manhattanBaseColours = c(rgb(0,base_colour2,0,1),rgb(0,0,base_colour1,1) )
allIndices = inputData_blendFactors$BP
# need to offset the SNP BP indices, by the previous number of indices in all previous chromosomes
inputData_blendFactors$Offsets = 0
for (i in 1:21) { # we always set the next offset, so we dont loop til last Chrom
message(i)
CHR_SNPs = inputData_blendFactors[inputData_blendFactors$CHR == i,]
maxBPCurrentChrom = max(CHR_SNPs$BP)
currentOffset = CHR_SNPs$Offsets[1]
nextOffset = currentOffset + maxBPCurrentChrom
inputData_blendFactors[inputData_blendFactors$CHR == (i+1),9] = nextOffset
}
allIndices = allIndices +inputData_blendFactors$Offsets
plot(B12_blendFactors$lFDR[1:5000], B12_blendFactors$b[1:5000], col =alpha("red", 0.3), xlab = "lFDR", ylab = "abs(SNP coef)", main ="")
plot(B12_blendFactors$lFDR[1:10000], B12_blendFactors$b[1:10000], col =alpha("red", 0.3), xlab = "lFDR", ylab = "abs(SNP coef)", main ="")
lo <- loess(B12_blendFactors$lFDR[1:10000]~ B12_blendFactors$b[1:10000])
#plot(x,y)
lines(predict(lo), col='red', lwd=2)
#plot(x,y)
lines(predict(lo), col='b;ue', lwd=2)
#plot(x,y)
lines(predict(lo), col='blue', lwd=2)
#plot(x,y)
lines(predict(lo), col='blue', lwd=5)
predict(lo)
plot(B12_blendFactors$lFDR[1:1000], B12_blendFactors$b[1:1000], col =alpha("red", 0.3), xlab = "lFDR", ylab = "abs(SNP coef)", main ="")
lo <- loess(B12_blendFactors$lFDR[1:1000]~ B12_blendFactors$b[1:1000])
#plot(x,y)
lines(predict(lo), col='blue', lwd=5)
plot(B12_blendFactors$lFDR[1:1000], abs(B12_blendFactors$b[1:1000]), col =alpha("red", 0.3), xlab = "lFDR", ylab = "abs(SNP coef)", main ="")
lo <- loess(B12_blendFactors$lFDR[1:1000]~ abs(B12_blendFactors$b[1:1000]) )
#plot(x,y)
lines(predict(lo), col='blue', lwd=5)
lo <- loess(abs(B12_blendFactors$b[1:1000])~ B12_blendFactors$lFDR[1:1000] )
#plot(x,y)
lines(predict(lo), col='blue', lwd=5)
plot(B12_blendFactors$lFDR[1:10000], abs(B12_blendFactors$b[1:10000]), col =alpha("red", 0.3), xlab = "lFDR", ylab = "abs(SNP coef)", main ="")
lo <- loess(abs(B12_blendFactors$b[1:10000])~ B12_blendFactors$lFDR[1:10000] )
#plot(x,y)
lines(predict(lo), col='blue', lwd=5)
plot(B12_blendFactors$lFDR[1:20000], abs(B12_blendFactors$b[1:20000]), col =alpha("red", 0.3), xlab = "lFDR", ylab = "abs(SNP coef)", main ="")
lo <- loess(abs(B12_blendFactors$b[1:20000])~ B12_blendFactors$lFDR[1:20000] )
#plot(x,y)
lines(predict(lo), col='blue', lwd=5)
plot(B12_blendFactors$lFDR[1:10000], abs(B12_blendFactors$b[1:10000]), col =alpha("red", 0.3), xlab = "lFDR", ylab = "abs(SNP coef)", main ="")
smoothingSpline = smooth.spline(B12_blendFactors$lFDR[1:10000], abs(B12_blendFactors$b[1:10000]), spar=0.35)
lines(smoothingSpline)
lines(smoothingSpline, col='blue', lwd=5)
?smooth.spline
plot(B12_blendFactors$lFDR[1:10000], abs(B12_blendFactors$b[1:10000]), col =alpha("red", 0.3), xlab = "lFDR", ylab = "abs(SNP coef)", main ="")
lo <- loess(B12_blendFactors$lFDR[1:10000] ~ abs(B12_blendFactors$b[1:10000]) )
#plot(x,y)
lines((lo), col='blue', lwd=5)
smoothingSpline = smooth.spline(B12_blendFactors$lFDR[1:10000], abs(B12_blendFactors$b[1:10000]), spar=0.35)
lines(smoothingSpline, col='blue', lwd=5)
plot(B12_blendFactors$lFDR[1:10000], abs(B12_blendFactors$b[1:10000]), col =alpha("red", 0.3), xlab = "lFDR", ylab = "abs(SNP coef)", main ="")
smoothingSpline = smooth.spline(B12_blendFactors$lFDR[1:10000], abs(B12_blendFactors$b[1:10000]), spar=0.5)
lines(smoothingSpline, col='blue', lwd=5)
smoothingSpline = smooth.spline(B12_blendFactors$lFDR[1:10000], abs(B12_blendFactors$b[1:10000]), spar=1)
lines(smoothingSpline, col='blue', lwd=5)
plot(B12_blendFactors$lFDR[1:10000], abs(B12_blendFactors$b[1:10000]), col =alpha("red", 0.3), xlab = "lFDR", ylab = "abs(SNP coef)", main ="")
smoothingSpline = smooth.spline(B12_blendFactors$lFDR[1:10000], abs(B12_blendFactors$b[1:10000]), spar=1)
lines(smoothingSpline, col='blue', lwd=5)
plot(B12_blendFactors$lFDR[1:10000], abs(B12_blendFactors$b[1:10000]), cex=1.5, col =alpha("red", 0.3), xlab = "lFDR", ylab = "abs(SNP coef)", main ="")
plot(B12_blendFactors$lFDR[1:10000], abs(B12_blendFactors$b[1:10000]), cex.axis=1.5, col =alpha("red", 0.3), xlab = "lFDR", ylab = "abs(SNP coef)", main ="")
plot(B12_blendFactors$lFDR[1:10000], abs(B12_blendFactors$b[1:10000]), cex.axis=1.5, cex.labels=1.5, col =alpha("red", 0.3), xlab = "lFDR", ylab = "abs(SNP coef)", main ="")
plot(B12_blendFactors$lFDR[1:10000], abs(B12_blendFactors$b[1:10000]), cex.axis=1.5, cex.lmain=1.5, col =alpha("red", 0.3), xlab = "lFDR", ylab = "abs(SNP coef)", main ="")
plot(B12_blendFactors$lFDR[1:10000], abs(B12_blendFactors$b[1:10000]), cex.axis=1.5, cex.main=1.5, col =alpha("red", 0.3), xlab = "lFDR", ylab = "abs(SNP coef)", main ="")
plot(B12_blendFactors$lFDR[1:10000], abs(B12_blendFactors$b[1:10000]), cex.axis=1.5, cex.main=1.5, col =alpha("red", 0.3), xlab = "lFDR", ylab = "abs(SNP coef)", main ="")
plot(B12_blendFactors$lFDR[1:10000], abs(B12_blendFactors$b[1:10000]), cex.axis=1.5, cex.text=1.5, col =alpha("red", 0.3), xlab = "lFDR", ylab = "abs(SNP coef)", main ="")
plot(B12_blendFactors$lFDR[1:10000], abs(B12_blendFactors$b[1:10000]), cex.axis=1.5, cex.lab=1.5, col =alpha("red", 0.3), xlab = "lFDR", ylab = "abs(SNP coef)", main ="")
hist(B12_blendFactors$lFDR, probability = T, col ="red", xlab = "lFDR", main ="", cex.axis=1.5, cex.lab=1.5)
?IQR
?smooth.spline

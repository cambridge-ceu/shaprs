par(new=T)
plot(subpheno_means~x_axis_marks, type="o", ann=F, pch=19,xaxt="n",yaxt="n", col = "#166938",lwd = 2, cex =2.0, ylim=c(0,overallMax))
arrows(x_axis_marks,subpheno_means, x_axis_marks,subpheno_means+ subpheno_bound, lwd=2, length=0.05, angle=90, col = "#166938")
arrows(x_axis_marks,subpheno_means, x_axis_marks,subpheno_means- subpheno_bound, lwd=2, length=0.05, angle=90, col = "#166938")
par(new=T)
plot(shaprs_means~x_axis_marks, type="o", ann=F, pch=19,xaxt="n",yaxt="n", col = "#c5b000",lwd = 2, cex =2.0, ylim=c(0,overallMax))
arrows(x_axis_marks,shaprs_means, x_axis_marks,shaprs_means+ shaprs_bound, lwd=2, length=0.05, angle=90, col = "#c5b000")
arrows(x_axis_marks,shaprs_means, x_axis_marks,shaprs_means- shaprs_bound, lwd=2, length=0.05, angle=90, col = "#c5b000")
legend("bottomright", inset=.02, legend=c("combined", "subpheno", "shaPRS"),
col= c("#00587c", "#166938","#c5b000"), text.col=c("#00587c", "#166938","#c5b000"), fill=c("#00587c", "#166938","#c5b000"), cex=1.5, pt.cex = 1,box.lty=0) # ,inset=-0.01
axis(1,at=x_axis_marks,labels=xlabels, cex.axis = 2)
axis(1,at=x_axis_marks,labels=xlabels, cex.axis = 2,mgp=c(3,3.5,0))
axis(1,at=x_axis_marks,labels=xlabels, cex.axis = 2,mgp=c(3,1.5,0))
#filen =paste(outputLoc,".pdf", sep="" )
#pdf(filen, width=6.4 , height=6.4);
filen =paste(outputLoc,".png", sep="" )
png(filen, width=345*3  , height=200*3);
plot(combined_means~x_axis_marks, xlab=xaxisname, type="o", pch=19,ylab = "predictive power (r^2)",xaxt="n", col = "#00587c",lwd = 2, cex =2.0, ylim=c(0,overallMax), main=plotName, cex.lab = 1.5, cex.axis = 1.5, cex.names = 1.2, cex.main = 1.8)
arrows(x_axis_marks,combined_means, x_axis_marks,combined_means+ combined_bound, lwd=2, length=0.05, angle=90, col = "#00587c")
arrows(x_axis_marks,combined_means, x_axis_marks,combined_means- combined_bound, lwd=2, length=0.05, angle=90, col = "#00587c")
par(new=T)
plot(subpheno_means~x_axis_marks, type="o", ann=F, pch=19,xaxt="n",yaxt="n", col = "#166938",lwd = 2, cex =2.0, ylim=c(0,overallMax))
arrows(x_axis_marks,subpheno_means, x_axis_marks,subpheno_means+ subpheno_bound, lwd=2, length=0.05, angle=90, col = "#166938")
arrows(x_axis_marks,subpheno_means, x_axis_marks,subpheno_means- subpheno_bound, lwd=2, length=0.05, angle=90, col = "#166938")
par(new=T)
plot(shaprs_means~x_axis_marks, type="o", ann=F, pch=19,xaxt="n",yaxt="n", col = "#c5b000",lwd = 2, cex =2.0, ylim=c(0,overallMax))
arrows(x_axis_marks,shaprs_means, x_axis_marks,shaprs_means+ shaprs_bound, lwd=2, length=0.05, angle=90, col = "#c5b000")
arrows(x_axis_marks,shaprs_means, x_axis_marks,shaprs_means- shaprs_bound, lwd=2, length=0.05, angle=90, col = "#c5b000")
legend("bottomright", inset=.02, legend=c("combined", "subpheno", "shaPRS"),
col= c("#00587c", "#166938","#c5b000"), text.col=c("#00587c", "#166938","#c5b000"), fill=c("#00587c", "#166938","#c5b000"), cex=1.5, pt.cex = 1,box.lty=0) # ,inset=-0.01
axis(1,at=x_axis_marks,labels=xlabels, cex.axis = 2,mgp=c(3,1.3,0))
dev.off()
getBoxName  = function(fullPath) {
name = unlist( strsplit(fullPath, "/", fixed = TRUE) )
name = name[length(name)]  # get rid of the path
#name = unlist( strsplit(name, ".", fixed = TRUE) )[1] # get rid of the file extension (if any)
print(name)
name = paste("predicted: ", gsub("_from_", "\ntrained: ", name), sep="" )
if ( grepl("Comp_", name, fixed = TRUE) ) { # want to replace the cryptic 'Comp_.099' with 'Composite'
withoutComp = unlist(strsplit(name, "Comp_"))[1]
name = paste(withoutComp, "Composite", sep="")
}
return(name)
}
inputFiles = c("C:/softwares/Cluster/GIANT/miniPRS/CD_CD_PRS", "C:/softwares/Cluster/GIANT/miniPRS/CD_IBD_PRS", "C:/softwares/Cluster/GIANT/miniPRS/UC_UC_PRS" ,"C:/softwares/Cluster/GIANT/miniPRS/UC_IBD_PRS")
outputName = "IBD_subpheno_PRS"
plotName = "IBD_PRS_performance_against_subphenotypes"
ceilingValue = -1
outputLoc = "C:/softwares/Cluster/GIANT/miniPRS/IBD_Subphenos"
colour="#166938"
#
#
plotName = gsub("_", " ", plotName) #remove underscores
########################################################
## ____________________________________________________________
i=1
# attempt to load in as many input files as they exist
inputDatas = list()
for(i in 1:length(inputFiles)) {
inputDatas[[i]] =read.table( inputFiles[i]  ,header=F)
}
#allColours = rainbow(length(inputFiles)) # get some nice distinct colours based on the number of elements we want to plot
#allColours[allColours== "#FFFF00FF"] <- "black" # yellow is poor for reading with letters, replace it
allColours = rep(colour, length(inputFiles))
# load ^ process data
allData = NULL
allMeans= list() # = vector(length = length(inputFiles) )
boxNames = vector(length = length(inputFiles) )
allData
# load ^ process data
allData = NULL
allMeans= list() # = vector(length = length(inputFiles) )
boxNames = vector(length = length(inputFiles) )
for (i in 1:length(inputFiles)) {
data = as.matrix(inputDatas[[i]])
numNAs = length( which(is.na(data)) )
if(numNAs > 0 ) { print("Input has NAs which were replaced by column mean")}
data[is.na(data)] <- mean(data, na.rm = TRUE) # replace NA's by data mean
allData = cbind(allData, data )
allMeans[[i]] = mean( data )
boxNames[i] = getBoxName(inputFiles[i])
#boxNames[i] = paste(boxNames[i],"\n(u=", round(allMeans[[i]], 3),")", sep="")
}
allData[is.na(allData)] <- 0
minVal = min(allData) * 0.9
maxVal = max(allData) * 1.1
overallMean = mean( unlist(allMeans) )
if (ceilingValue != -1 ) { maxVal = ceilingValue * 1.1 }
View(allData)
t.test(allData)
? pairwise.t.test
df <- data.frame(a=runif(100),
+          b=runif(100),
+          c=runif(100)+0.5,
+          d=runif(100)+0.5,
+          e=runif(100)+1,
+          f=runif(100)+1)
d <- melt(df)
df <- data.frame(a=runif(100),   b=runif(100),  c=runif(100)+0.5,  d=runif(100)+0.5,  e=runif(100)+1,  f=runif(100)+1)
d <- melt(df)
pairwise.t.test(df, p.adjust = "none")
?matrix.t.test
View(df)
sapply(df, function(i) t.test(i)$p.value)
colnames(df)
pairwise.t.test(df,colnames(df), p.adjust = "none")
df = data.frame(n = c(10,12,34,23,16), mean = c(6.62,6.31,5.95,5.67,6.12), sd = c(0.52,0.49,0.76,0.56,0.35))
sample_distributions = data.frame(value = numeric(0), sample = integer(0))
for(i in 1:nrow(df)){
values = rnorm(df$n[i], df$mean[i], df$sd[i])
sample= rep(i, length(values))
sample_distributions = rbind(sample_distributions, data.frame(values,sample))
}
View(df)
View(sample_distributions)
pairwise.t.test(x = sample_distributions$values, g = sample_distributions$sample, p.adjust.method = "none")
res <-  outer(1:nrow(dat), 1:nrow(dat), FUN=Vectorize(function(i,j) {
x1 <- dat[c(i,j), ]
T.test(x1$n, x1$mean, x1$sd)[[2]]}))
df <- data.frame(a=runif(100),   b=runif(100),  c=runif(100)+0.5,  d=runif(100)+0.5,  e=runif(100)+1,  f=runif(100)+1)
View(data)
View(df)
dat = dat
res <-  outer(1:nrow(dat), 1:nrow(dat), FUN=Vectorize(function(i,j) {
x1 <- dat[c(i,j), ]
T.test(x1$n, x1$mean, x1$sd)[[2]]}))
dat = df
res <-  outer(1:nrow(dat), 1:nrow(dat), FUN=Vectorize(function(i,j) {
x1 <- dat[c(i,j), ]
T.test(x1$n, x1$mean, x1$sd)[[2]]}))
res <-  outer(1:nrow(dat), 1:nrow(dat), FUN=Vectorize(function(i,j) {
x1 <- dat[c(i,j), ]
t.test(x1$n, x1$mean, x1$sd)[[2]]}))
dat = df
res <-  outer(1:nrow(dat), 1:nrow(dat), FUN=Vectorize(function(i,j) {
x1 <- dat[c(i,j), ]
t.test(x1$n, x1$mean, x1$sd)[[2]]}))
dat <- structure(list(mean = c(6.62, 6.31, 5.95, 5.67, 6.12),
sd = c(0.52,
0.49, 0.76, 0.56, 0.35), n = c(10L, 12L, 34L, 23L, 16L)),
.Names = c("mean",
"sd", "n"), class = "data.frame", row.names = c("1", "2", "3",
"4", "5"))
View(dat)
df <- data.frame(a=runif(100),   b=runif(100),  c=runif(100)+0.5,  d=runif(100)+0.5,  e=runif(100)+1,  f=runif(100)+1)
lapply(split.default(df[2:7], gsub("\\D+", "", names(df)[2:7])), t.test)
lapply(df, t.test)
?lapply
testResults = lapply(df, t.test)$p.value
testResults
testResults = lapply(df, t.test)
testResults[1]
t.test(df[,1])
1:ncol(df)
combn(1:ncol(df), 2)
allCombs= combn(1:ncol(df), 2)
length(allCombs)
ncol(allCombs)
df <- data.frame(a=runif(100),   b=runif(100),  c=runif(100)+0.5)
allCombs= combn(1:ncol(df), 2)
ncol(allCombs)
allCombs
df <- data.frame(a=runif(100),   b=runif(100),  c=runif(100)+0.5,  d=runif(100)+0.5)
allCombs= combn(1:ncol(df), 2)
ncol(allCombs)
allCombs
allCombs= combn(1:ncol(allData), 2)
allCombs[i,1]
allCombs
View(allCombs)
allCombs[1,1]
for ( i in 1:ncol(allCombs)) {
index_1 = allCombs[i,1]
index_2 = allCombs[i,2]
print(index_1,index_2)
#t.test(oi_linear,oi_nonlinear)$p.value
}
ncol(allCombs)
i
for ( i in 1:ncol(allCombs)) {
index_1 = allCombs[1,i]
index_2 = allCombs[2,i]
print(index_1,index_2)
#t.test(oi_linear,oi_nonlinear)$p.value
}
View(allCombs)
ncol(allCombs)
allCombs[1,3]
allCombs[2,3]
allCombs[2,6]
for ( i in 1:ncol(allCombs)) {
index_1 = allCombs[1,i]
index_2 = allCombs[2,i]
print(index_1,index_2)
#t.test(oi_linear,oi_nonlinear)$p.value
}
for ( i in 1:ncol(allCombs)) {
index_1 = allCombs[1,i]
index_2 = allCombs[2,i]
print(index_1)
print(index_2)
#t.test(oi_linear,oi_nonlinear)$p.value
}
View(allData)
for ( i in 1:ncol(allCombs)) {
index_1 = allCombs[1,i]
index_2 = allCombs[2,i]
print(t.test(allData[,index_1],allData[,index_2])$p.value)
}
?t.test
allCombs= combn(1:ncol(allData), 2)
for ( i in 1:ncol(allCombs)) {
index_1 = allCombs[1,i]
index_2 = allCombs[2,i]
print( paste("paired test", t.test(allData[,index_1],allData[,index_2], paired = T)$p.value) )
}
boxNames
allCombs= combn(1:ncol(allData), 2)
for ( i in 1:ncol(allCombs)) {
index_1 = allCombs[1,i]
index_2 = allCombs[2,i]
print( paste(boxNames[index_1],"v",boxNames[index_2],":", t.test(allData[,index_1],allData[,index_2], paired = T)$p.value) )
}
combined
# perform paired 2 sample t-tests
allCombs= combn(1:ncol(combined), 2)
allCombs
boxNames=c("combined", "subpheno", "shaPRS")
boxNames=c("combined", "subpheno", "shaPRS")
boxNames
xlabels=c("20%","50%","80%")
i=1
xlabels[i]
print(paste("at rG",xlabels[i]))
combinedIndex=1
subphenoIndex=2
shaPRSIndex=3
boxNames[combinedIndex]
print(paste("at rG",xlabels[i] ,":" ,boxNames[combinedIndex] ,"v", boxNames[subphenoIndex]) )
t.test(combined[,i], subpheno[,i], paired = T)$p.value
combined_means
combined_means[i]
combined_means[i] / subpheno_means[i]
subpheno_means[i]
combined_means[i]
print(paste("at rG",xlabels[i] ,":" ))
print(boxNames[combinedIndex] ,"v", boxNames[subphenoIndex], "| t-test:", t.test(combined[,i], subpheno[,i], paired = T)$p.value)  )
print(paste(boxNames[combinedIndex] ,"v", boxNames[subphenoIndex], "| t-test:", t.test(combined[,i], subpheno[,i], paired = T)$p.value)  )
combined_means[i] - subpheno_means[i] / ( (combined_means[i] + subpheno_means[i])/2 )
combined_means[i] - subpheno_means[i] / ( (combined_means[i] + subpheno_means[i])/2 ) * 100
# https://www.mathsisfun.com/percentage-difference.html
percDiff = round(combined_means[i] - subpheno_means[i] / ( (combined_means[i] + subpheno_means[i])/2 ) * 100)
percDiff = round(combined_means[i] - subpheno_means[i] / ( (combined_means[i] + subpheno_means[i])/2 ) * 100)
print(paste(boxNames[combinedIndex] ,"v", boxNames[subphenoIndex], "| t-test:", t.test(combined[,i], subpheno[,i], paired = T)$p.value) , " / % diff:", percDiff )
percDiff
print(paste(boxNames[combinedIndex] ,"v", boxNames[subphenoIndex], "| t-test:", t.test(combined[,i], subpheno[,i], paired = T)$p.value , " / % diff:", percDiff ))
print(paste(boxNames[combinedIndex] ,"v", boxNames[subphenoIndex], "| t-test:", t.test(combined[,i], subpheno[,i], paired = T)$p.value , "/ diff:", percDiff,"%" ))
percDiff = round(combined_means[i] - shaprs_means[i] / ( (combined_means[i] + shaprs_means[i])/2 ) * 100)
print(paste(boxNames[combinedIndex] ,"v", boxNames[shaPRSIndex], "| t-test:", t.test(combined[,i], shaprs[,i], paired = T)$p.value , "/ diff:", percDiff,"%" ))
print(paste(boxNames[combinedIndex] ,"v", boxNames[shaPRSIndex], "| t-test:", t.test(combined[,i], shapers[,i], paired = T)$p.value , "/ diff:", percDiff,"%" ))
print(paste(boxNames[combinedIndex] ,"v", boxNames[shaPRSIndex], "| t-test:", t.test(combined[,i], shapr[,i], paired = T)$p.value , "/ diff:", percDiff,"%" ))
print(paste(boxNames[combinedIndex] ,"v", boxNames[shaPRSIndex], "| t-test:", t.test(combined[,i], shaprs[,i], paired = T)$p.value , "/ diff:", percDiff,"%" ))
print(paste(boxNames[combinedIndex] ,"v", boxNames[shaPRSIndex], "| t-test:", t.test(combined[,i], shaPRS[,i], paired = T)$p.value , "/ diff:", percDiff,"%" ))
percDiff = round(subpheno_means[i] - shaprs_means[i] / ( (subpheno_means[i] + shaprs_means[i])/2 ) * 100)
print(paste(boxNames[subphenoIndex] ,"v", boxNames[shaPRSIndex], "| t-test:", t.test(subpheno[,i], shaPRS[,i], paired = T)$p.value , "/ diff:", percDiff,"%" ))
for ( i in 1:ncol(combined)) {    # https://www.mathsisfun.com/percentage-difference.html
combinedIndex=1
subphenoIndex=2
shaPRSIndex=3
print(paste("at rG",xlabels[i] ,":" ))
percDiff = round(combined_means[i] - subpheno_means[i] / ( (combined_means[i] + subpheno_means[i])/2 ) * 100)
print(paste(boxNames[combinedIndex] ,"v", boxNames[subphenoIndex], "| t-test:", t.test(combined[,i], subpheno[,i], paired = T)$p.value , "/ diff:", percDiff,"%" ))
percDiff = round(combined_means[i] - shaprs_means[i] / ( (combined_means[i] + shaprs_means[i])/2 ) * 100)
print(paste(boxNames[combinedIndex] ,"v", boxNames[shaPRSIndex], "| t-test:", t.test(combined[,i], shaPRS[,i], paired = T)$p.value , "/ diff:", percDiff,"%" ))
percDiff = round(subpheno_means[i] - shaprs_means[i] / ( (subpheno_means[i] + shaprs_means[i])/2 ) * 100)
print(paste(boxNames[subphenoIndex] ,"v", boxNames[shaPRSIndex], "| t-test:", t.test(subpheno[,i], shaPRS[,i], paired = T)$p.value , "/ diff:", percDiff,"%" ))
print("______________________________")
}
combined_means[i]
subpheno_means[i]
#filen =paste(outputLoc,".pdf", sep="" )
#pdf(filen, width=6.4 , height=6.4);
filen =paste(outputLoc,".png", sep="" )
png(filen, width=345*3  , height=200*3);
plot(combined_means~x_axis_marks, xlab=xaxisname, type="o", pch=19,ylab = "predictive power (r^2)",xaxt="n", col = "#00587c",lwd = 2, cex =2.0, ylim=c(0,overallMax), main=plotName, cex.lab = 1.5, cex.axis = 1.5, cex.names = 1.2, cex.main = 1.8)
arrows(x_axis_marks,combined_means, x_axis_marks,combined_means+ combined_bound, lwd=2, length=0.05, angle=90, col = "#00587c")
arrows(x_axis_marks,combined_means, x_axis_marks,combined_means- combined_bound, lwd=2, length=0.05, angle=90, col = "#00587c")
par(new=T)
plot(subpheno_means~x_axis_marks, type="o", ann=F, pch=19,xaxt="n",yaxt="n", col = "#166938",lwd = 2, cex =2.0, ylim=c(0,overallMax))
arrows(x_axis_marks,subpheno_means, x_axis_marks,subpheno_means+ subpheno_bound, lwd=2, length=0.05, angle=90, col = "#166938")
arrows(x_axis_marks,subpheno_means, x_axis_marks,subpheno_means- subpheno_bound, lwd=2, length=0.05, angle=90, col = "#166938")
par(new=T)
plot(shaprs_means~x_axis_marks, type="o", ann=F, pch=19,xaxt="n",yaxt="n", col = "#c5b000",lwd = 2, cex =2.0, ylim=c(0,overallMax))
arrows(x_axis_marks,shaprs_means, x_axis_marks,shaprs_means+ shaprs_bound, lwd=2, length=0.05, angle=90, col = "#c5b000")
arrows(x_axis_marks,shaprs_means, x_axis_marks,shaprs_means- shaprs_bound, lwd=2, length=0.05, angle=90, col = "#c5b000")
legend("bottomright", inset=.02, legend=boxNames,
col= c("#00587c", "#166938","#c5b000"), text.col=c("#00587c", "#166938","#c5b000"), fill=c("#00587c", "#166938","#c5b000"), cex=1.5, pt.cex = 1,box.lty=0) # ,inset=-0.01
axis(1,at=x_axis_marks,labels=xlabels, cex.axis = 2,mgp=c(3,1.3,0))
dev.off()
print(paste("written plot to",filen))
combinedLoc="C:/softwares/Cluster/GIANT/miniPRS/shaPRS/combined"
subphenoLoc="C:/softwares/Cluster/GIANT/miniPRS/shaPRS/subpheno"
shaprsLoc="C:/softwares/Cluster/GIANT/miniPRS/shaPRS/shaPRS"
plotName = "effect of rG on shaPRS"
outputLoc = "C:/softwares/Cluster/GIANT/miniPRS/shaPRS/out"
#filen =paste(outputLoc,".pdf", sep="" )
#pdf(filen, width=6.4 , height=6.4);
filen =paste(outputLoc,".png", sep="" )
png(filen, width=345*3  , height=200*3);
plot(combined_means~x_axis_marks, xlab=xaxisname, type="o", pch=19,ylab = "predictive power (r^2)",xaxt="n", col = "#00587c",lwd = 2, cex =2.0, ylim=c(0,overallMax), main=plotName, cex.lab = 1.5, cex.axis = 1.5, cex.names = 1.2, cex.main = 1.8)
arrows(x_axis_marks,combined_means, x_axis_marks,combined_means+ combined_bound, lwd=2, length=0.05, angle=90, col = "#00587c")
arrows(x_axis_marks,combined_means, x_axis_marks,combined_means- combined_bound, lwd=2, length=0.05, angle=90, col = "#00587c")
par(new=T)
plot(subpheno_means~x_axis_marks, type="o", ann=F, pch=19,xaxt="n",yaxt="n", col = "#166938",lwd = 2, cex =2.0, ylim=c(0,overallMax))
arrows(x_axis_marks,subpheno_means, x_axis_marks,subpheno_means+ subpheno_bound, lwd=2, length=0.05, angle=90, col = "#166938")
arrows(x_axis_marks,subpheno_means, x_axis_marks,subpheno_means- subpheno_bound, lwd=2, length=0.05, angle=90, col = "#166938")
par(new=T)
plot(shaprs_means~x_axis_marks, type="o", ann=F, pch=19,xaxt="n",yaxt="n", col = "#c5b000",lwd = 2, cex =2.0, ylim=c(0,overallMax))
arrows(x_axis_marks,shaprs_means, x_axis_marks,shaprs_means+ shaprs_bound, lwd=2, length=0.05, angle=90, col = "#c5b000")
arrows(x_axis_marks,shaprs_means, x_axis_marks,shaprs_means- shaprs_bound, lwd=2, length=0.05, angle=90, col = "#c5b000")
legend("bottomright", inset=.02, legend=boxNames,
col= c("#00587c", "#166938","#c5b000"), text.col=c("#00587c", "#166938","#c5b000"), fill=c("#00587c", "#166938","#c5b000"), cex=1.5, pt.cex = 1,box.lty=0) # ,inset=-0.01
axis(1,at=x_axis_marks,labels=xlabels, cex.axis = 2,mgp=c(3,1.3,0))
dev.off()
print(paste("written plot to",filen))
combinedIndex=1
subphenoIndex=2
shaPRSIndex=3
i=1
print(paste("at rG",xlabels[i] ,":" ))
shaprs_means[i]
subpheno_means[i]
combined_means[i]
shaprs_means[i]
percDiff = round(combined_means[i] - shaprs_means[i] / ( (combined_means[i] + shaprs_means[i])/2 ) * 100)
print(paste(boxNames[combinedIndex] ,"v", boxNames[shaPRSIndex], "| t-test:", t.test(combined[,i], shaPRS[,i], paired = T)$p.value , "/ diff:", percDiff,"%" ))
percDiff
shaprs_means[i]
combined_means[i]
combined_means[i] - shaprs_means[i]
percDiff = round(combined_means[i] - shaprs_means[i] / ( (combined_means[i] + shaprs_means[i])/2 ) * 100)
percDiff
percDiff = round( (combined_means[i] - shaprs_means[i]) / ( (combined_means[i] + shaprs_means[i])/2 ) * 100)
print(paste(boxNames[combinedIndex] ,"v", boxNames[shaPRSIndex], "| t-test:", t.test(combined[,i], shaPRS[,i], paired = T)$p.value , "/ diff:", percDiff,"%" ))
for ( i in 1:ncol(combined)) {    # https://www.mathsisfun.com/percentage-difference.html
combinedIndex=1
subphenoIndex=2
shaPRSIndex=3
print(paste("at rG",xlabels[i] ,":" ))
percDiff = round( (combined_means[i] - subpheno_means[i]) / ( (combined_means[i] + subpheno_means[i])/2 ) * 100)
print(paste(boxNames[combinedIndex] ,"v", boxNames[subphenoIndex], "| t-test:", t.test(combined[,i], subpheno[,i], paired = T)$p.value , "/ diff:", percDiff,"%" ))
percDiff = round( (combined_means[i] - shaprs_means[i]) / ( (combined_means[i] + shaprs_means[i])/2 ) * 100)
print(paste(boxNames[combinedIndex] ,"v", boxNames[shaPRSIndex], "| t-test:", t.test(combined[,i], shaPRS[,i], paired = T)$p.value , "/ diff:", percDiff,"%" ))
percDiff = round( (subpheno_means[i] - shaprs_means[i]) / ( (subpheno_means[i] + shaprs_means[i])/2 ) * 100)
print(paste(boxNames[subphenoIndex] ,"v", boxNames[shaPRSIndex], "| t-test:", t.test(subpheno[,i], shaPRS[,i], paired = T)$p.value , "/ diff:", percDiff,"%" ))
print("______________________________")
}
allCombs= combn(1:ncol(allData), 2)
for ( i in 1:ncol(allCombs)) {
index_1 = allCombs[1,i]
index_2 = allCombs[2,i]
percDiff = round( (allData[,index_1] - allData[,index_1]) / ( (allData[,index_1] + allData[,index_2])/2 ) * 100)
print( paste(boxNames[index_1],"v",boxNames[index_2],":", t.test(allData[,index_1],allData[,index_2], paired = T)$p.value) )
}
print( paste(boxNames[index_1],"v",boxNames[index_2],":", t.test(allData[,index_1],allData[,index_2], paired = T)$p.value, "/ diff:", percDiff, "%") )
allCombs= combn(1:ncol(allData), 2)
for ( i in 1:ncol(allCombs)) {
index_1 = allCombs[1,i]
index_2 = allCombs[2,i]
percDiff = round( (allData[,index_1] - allData[,index_1]) / ( (allData[,index_1] + allData[,index_2])/2 ) * 100)
print( paste(boxNames[index_1],"v",boxNames[index_2],":", t.test(allData[,index_1],allData[,index_2], paired = T)$p.value, "/ diff:", percDiff, "%") )
}
# #  inputFiles = c("C:/softwares/Cluster/GIANT/miniPRS/CD_CD_PRS", "C:/softwares/Cluster/GIANT/miniPRS/CD_IBD_PRS", "C:/softwares/Cluster/GIANT/miniPRS/UC_UC_PRS" ,"C:/softwares/Cluster/GIANT/miniPRS/UC_IBD_PRS")
# #  outputName = "IBD_subpheno_PRS"
# #  plotName = "IBD_PRS_performance_against_subphenotypes"
# #  ceilingValue = -1
# #  outputLoc = "C:/softwares/Cluster/GIANT/miniPRS/IBD_Subphenos"
# # colour="#166938"
#   # ASHG green: 166938 # UC
#   # ASHG yellow: c5b000  # CD
#
# #
inputFiles = c("C:/softwares/Cluster/GIANT/miniPRS/CD_CD_PRS", "C:/softwares/Cluster/GIANT/miniPRS/CD_IBD_PRS", "C:/softwares/Cluster/GIANT/miniPRS/UC_UC_PRS" ,"C:/softwares/Cluster/GIANT/miniPRS/UC_IBD_PRS")
outputName = "IBD_subpheno_PRS"
plotName = "IBD_PRS_performance_against_subphenotypes"
ceilingValue = -1
outputLoc = "C:/softwares/Cluster/GIANT/miniPRS/IBD_Subphenos"
## ____________________________________________________________
i=1
# attempt to load in as many input files as they exist
inputDatas = list()
for(i in 1:length(inputFiles)) {
inputDatas[[i]] =read.table( inputFiles[i]  ,header=F)
}
#allColours = rainbow(length(inputFiles)) # get some nice distinct colours based on the number of elements we want to plot
#allColours[allColours== "#FFFF00FF"] <- "black" # yellow is poor for reading with letters, replace it
allColours = rep(colour, length(inputFiles))
# load ^ process data
allData = NULL
allMeans= list() # = vector(length = length(inputFiles) )
boxNames = vector(length = length(inputFiles) )
for (i in 1:length(inputFiles)) {
data = as.matrix(inputDatas[[i]])
numNAs = length( which(is.na(data)) )
if(numNAs > 0 ) { print("Input has NAs which were replaced by column mean")}
data[is.na(data)] <- mean(data, na.rm = TRUE) # replace NA's by data mean
allData = cbind(allData, data )
allMeans[[i]] = mean( data )
boxNames[i] = getBoxName(inputFiles[i])
#boxNames[i] = paste(boxNames[i],"\n(u=", round(allMeans[[i]], 3),")", sep="")
}
allData[is.na(allData)] <- 0
minVal = min(allData) * 0.9
maxVal = max(allData) * 1.1
overallMean = mean( unlist(allMeans) )
if (ceilingValue != -1 ) { maxVal = ceilingValue * 1.1 }
allCombs= combn(1:ncol(allData), 2)
for ( i in 1:ncol(allCombs)) {
index_1 = allCombs[1,i]
index_2 = allCombs[2,i]
percDiff = round( (allData[,index_1] - allData[,index_1]) / ( (allData[,index_1] + allData[,index_2])/2 ) * 100)
print( paste(boxNames[index_1],"v",boxNames[index_2],":", t.test(allData[,index_1],allData[,index_2], paired = T)$p.value, "/ diff:", percDiff, "%") )
}
allData[,index_1]
# perform paired 2 sample t-tests
allCombs= combn(1:ncol(allData), 2)
for ( i in 1:ncol(allCombs)) {
index_1 = allCombs[1,i]
index_2 = allCombs[2,i]
mean1 = mean(allData[,index_1])
mean2 = mean(allData[,index_2])
percDiff = round( (mean1 - mean2) / ( (mean1 + mean2)/2 ) * 100)
print( paste(boxNames[index_1],"v",boxNames[index_2],":", t.test(allData[,index_1],allData[,index_2], paired = T)$p.value, "/ diff:", percDiff, "%") )
}
0.000518224786807205
0.0000518224786807205
0.0000110880068119852
library(devtools)
library(roxygen2)
setwd("C:/Users/mk23/GoogleDrive_phd/PHD/!Publications/shaPRS/R_package")
create("shaPRS")
setwd("C:/Users/mk23/GoogleDrive_phd/PHD/!Publications/shaPRS/R_package")
inputDataLoc='/inst/extdata/shapersToydata.txt'
inputData= read.table(inputDataLoc, header = T)
inputDataLoc='shaPRS/inst/extdata/shapersToydata.txt'
inputData= read.table(inputDataLoc, header = T)
thresholds =  c(0.5, 0.99)
system.file("extdata", "shapersToydata.txt", package = "shaPRS")
document()
setwd("C:/Users/mk23/GoogleDrive_phd/PHD/!Publications/shaPRS/R_package")
document()
setwd("C:/Users/mk23/GoogleDrive_phd/PHD/!Publications/shaPRS/R_package/shaPRS")
setwd("C:/Users/mk23/GoogleDrive_phd/PHD/!Publications/shaPRS/R_package/shaPRS")
document()
document()
build()
install()
library(shaPRS)
?shaPRS
library("shaPRS")
?shaPRS_adjust
inputDataLoc <- system.file("extdata", "shapersToydata.txt", package = "shaPRS")
inputData= read.table(inputDataLoc, header = T)
results = shaPRS_adjust(inputData)
uninstall()
document()
warnings()
document()
build()
install()
library("shaPRS")
?shaPRS_adjust
# test
inputDataLoc <- system.file("extdata", "shapersToydata.txt", package = "shaPRS")
inputData= read.table(inputDataLoc, header = T)
results = shaPRS_adjust(inputData)
uninstall()
document()
build()
install()
# test
inputDataLoc <- system.file("extdata", "shapersToydata.txt", package = "shaPRS")
inputData= read.table(inputDataLoc, header = T)
results = shaPRS_adjust(inputData)
uninstall()
document()
build()
install()
library("shaPRS")
# test
inputDataLoc <- system.file("extdata", "shapersToydata.txt", package = "shaPRS")
inputData= read.table(inputDataLoc, header = T)
results = shaPRS_adjust(inputData)
usethis::use_package("qvalue")
document()
build()
install()
library("shaPRS")
# test
inputDataLoc <- system.file("extdata", "shapersToydata.txt", package = "shaPRS")
inputData= read.table(inputDataLoc, header = T)
results = shaPRS_adjust(inputData)
library("qvalue", lib.loc="~/R/R-3.6.2/library")
uninstall('qvalue')
remove.packages("qvalue", lib="~/R/R-3.6.2/library")
uninstall()
usethis::use_package("qvalue")
#usethis::use_package("qvalue")
document()
install.packages("qvalue")
install_github("jdstorey/qvalue")
usethis::use_package("qvalue")
